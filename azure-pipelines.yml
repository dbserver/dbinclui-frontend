pr:
  branches:
    include:
      - azure-pipelines
trigger:
  branches:
    include:
      - azure-pipelines
  tags:
    include:
      - "*"

variables:
  - name: buildId
    value: $(Build.BuildId)

  - name: vmImage
    value: ubuntu-latest

  - name: k8sNamespace
    value: dbinclui

  - name: connectionType
    value: Kubernetes Service Connection

  - name: acrServiceConnection
    value: "docker-registry"

  - name: aksServiceConnection
    value: "AKS-DBSERVER"

  - name: dockerRepository
    value: "dbinclui/frontend"

  - name: branchName
    value: $(Build.SourceBranchName)

  - name: acrUrl
    value: "dbserverregistry.azurecr.io/dbinclui/frontend"

  - name: isTag
    value: ${{startsWith(variables['Build.SourceBranch'],'refs/tags/')}}

  - name: isMergePR
    value: ${{ne(variables['Build.Reason'], 'PullRequest')}}
    
  - group: dbinclui-app-env-dev

pool:
  vmImage: $(vmImage)

stages:
  - stage: CI
    jobs:
      - job: CI
        displayName: Run tests, build and push image to ACR
        steps:      
          - task: Npm@1
            displayName: "Running install"
            inputs:
              command: custom
              customCommand: "install --legacy-peer-deps"
          - task: Npm@1
            displayName: "Running tests"
            inputs:
              command: custom
              customCommand: "run test"
          - task: Npm@1
            displayName: "Build Prod"
            condition: or(eq(variables['isTag'], 'true'), eq(variables['isMergePR'], 'true'))
            inputs:
              command: custom
              customCommand: "run build"
              workingDir: ./
            
            
          - task: Docker@2
            displayName: Building docker image and pushing to ACR
            condition: and(succeeded(), or(eq(variables['isMergePR'], 'true'), eq(variables['isTag'], 'true')))
            inputs:
              containerRegistry: $(acrServiceConnection)
              repository: $(dockerRepository)
              command: "buildAndPush"
              Dockerfile: "**/Dockerfile"
              ${{ if eq(variables['isTag'], 'true') }}:
              #   tags: $(branchName)
              # ${{ else }}:
                tags: |
                  $(buildId)
                  latest

  - stage: DeployToDevelopment
  #  dependsOn: CI
  # condition: and(succeeded(), eq(variables['isMergePR'], 'true'), ne(variables['isTag'], 'true'))
    variables:
      - name: enviroment
        value: "dev"
      - name: ingress_domain
        value: "dbinclui-dev"
      - group: dbinclui-app-env-dev
    jobs:
      - job: ApplyManifests
        displayName: Applying kubernetes manifests
        steps:
          - task: ShellScript@2
            displayName: Changing yaml's variables
            inputs:
              scriptPath: "./kubernetes/change_variables.sh"
          - task: Kubernetes@1
            displayName: Create configmap
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              containerRegistryType: "Azure Container Registry"
              configMapName: "dbinclui-app-configmap-dev"
              forceUpdateConfigMap: true
              configMapArguments: >
                  --from-literal=REACT_APP_FIREBASE_API_KEY=$(REACT_APP_FIREBASE_API_KEY)
                  --from-literal=REACT_APP_FIREBASE_APP_ID=$(REACT_APP_FIREBASE_APP_ID)
                  --from-literal=REACT_APP_FIREBASE_AUTH_DOMAIN=$(REACT_APP_FIREBASE_AUTH_DOMAIN)
                  --from-literal=REACT_APP_FIREBASE_MEASUREMENT_ID=$(REACT_APP_FIREBASE_MEASUREMENT_ID)
                  --from-literal=REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$(REACT_APP_FIREBASE_MESSAGING_SENDER_ID)
                  --from-literal=REACT_APP_FIREBASE_PROJECT_ID=$(REACT_APP_FIREBASE_PROJECT_ID)
                  --from-literal=REACT_APP_FIREBASE_STORAGE_BUCKET=$(REACT_APP_FIREBASE_STORAGE_BUCKET)
                  --from-literal=REACT_APP_BASE_URL=$(REACT_APP_BASE_URL)
         
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              kubernetesServiceConnection: $(aksServiceConnection)
              manifests: |
                ./kubernetes/deployment.yaml
                ./kubernetes/service.yaml
              containers: |
                $(acrUrl):latest
          - task: Kubernetes@1
            displayName: Apply Ingress
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: "apply"
              useConfigurationFile: true
              configuration: "./kubernetes/ingress.yaml"
              outputFormat: none
          # - task: Kubernetes@1
          #   displayName: Restart service
          #   inputs:
          #     connectionType: $(connectionType)
          #     kubernetesServiceEndpoint: $(aksServiceConnection)
          #     namespace: $(k8sNamespace)
          #     command: "rollout"
          #     arguments: "restart deploy dbinclui-app-dev"

  - stage: DeployToProduction
 #   dependsOn: CI
  #  condition: and(succeeded(), eq(variables['isTag'], 'true'))
    variables:
      - name: enviroment
        value: "prd"
      - name: ingress_domain
        value: "dbinclui"
    jobs:
      - job: ApplyManifests
        displayName: Applying kubernetes manifests
        steps:
          - task: ShellScript@2
            displayName: Changing yaml's variables
            inputs:
              scriptPath: "./kubernetes/change_variables.sh"
          
          - task: Kubernetes@1
            displayName: Create configmap
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              containerRegistryType: "Azure Container Registry"
              configMapName: "dbinclui-app-configmap-prd"
              forceUpdateConfigMap: true
              configMapArguments: >
                  --from-literal=REACT_APP_FIREBASE_API_KEY=$(REACT_APP_FIREBASE_API_KEY)
                  --from-literal=REACT_APP_FIREBASE_APP_ID=$(REACT_APP_FIREBASE_APP_ID)
                  --from-literal=REACT_APP_FIREBASE_AUTH_DOMAIN=$(REACT_APP_FIREBASE_AUTH_DOMAIN)
                  --from-literal=REACT_APP_FIREBASE_MEASUREMENT_ID=$(REACT_APP_FIREBASE_MEASUREMENT_ID)
                  --from-literal=REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$(REACT_APP_FIREBASE_MESSAGING_SENDER_ID)
                  --from-literal=REACT_APP_FIREBASE_PROJECT_ID=$(REACT_APP_FIREBASE_PROJECT_ID)
                  --from-literal=REACT_APP_FIREBASE_STORAGE_BUCKET=$(REACT_APP_FIREBASE_STORAGE_BUCKET)
                  --from-literal=REACT_APP_BASE_URL=$(REACT_APP_BASE_URL)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              kubernetesServiceConnection: $(aksServiceConnection)
              manifests: |
                ./kubernetes/deployment.yaml
                ./kubernetes/service.yaml
              containers: |
                $(acrUrl):$(branchName)
          - task: Kubernetes@1
            displayName: Apply Ingress
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: "apply"
              useConfigurationFile: true
              configuration: "./kubernetes/ingress.yaml"
              outputFormat: none
          # - task: Kubernetes@1
          #   displayName: Restart service
          #   inputs:
          #     connectionType: $(connectionType)
          #     kubernetesServiceEndpoint: $(aksServiceConnection)
          #     namespace: $(k8sNamespace)
          #     command: "rollout"
          #     arguments: "restart deploy dbinclui-app-prd"
