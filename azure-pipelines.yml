pr:
  branches:
    include:
      - azure-pipelines
trigger:
  branches:
    include:
      - azure-pipelines
  tags:
    include:
      - '*'

variables:
  - name: buildId
    value: $(Build.BuildId)

  - name: vmImage
    value: ubuntu-latest

  - name: k8sNamespace
    value: dbinclui

  - name: connectionType
    value: Kubernetes Service Connection

  - name: acrServiceConnection
    value: 'docker-registry'

  - name: aksServiceConnection
    value: 'AKS-DBSERVER'

  - name: dockerRepository
    value: 'dbinclui/frontend'

  - name: branchName
    value: $(Build.SourceBranchName)

  - name: acrUrl
    value: 'dbserverregistry.azurecr.io/dbinclui/frontend'

  - name: isTag
    value: ${{startsWith(variables['Build.SourceBranch'],'refs/tags/')}}

  - name: isMergePR
    value: ${{ne(variables['Build.Reason'], 'PullRequest')}}

  

pool:
  vmImage: $(vmImage)

stages:
#   - stage: 'CI_Development'
#     jobs:
#       - job: 
#        # condition: and(succeeded(), eq(variables['isMergePR'], 'true'), ne(variables['isTag'], 'true'))
#         variables: 
#         - group: dbinclui-app-env-dev
#         - name: enviroment
#           value: 'dev'
#         displayName: Run tests, build and push image to ACR
#         steps:
         
#          #ver variáveis de ambiente 
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: 'env | sort'
#           - task: Npm@1
#             displayName: 'Running install'
#             inputs:
#               command: custom
#               customCommand: 'install --legacy-peer-deps' 

#           - task: Npm@1
#             displayName: 'build dev'
#             inputs:
#               command: custom
#               customCommand: 'run build'
#               workingDir: ./

#           - task: Docker@2
#             displayName: Building docker image and pushing to ACR
#             inputs:
#               containerRegistry: $(acrServiceConnection)
#               repository: $(dockerRepository)
#               command: 'buildAndPush'
#               Dockerfile: '**/Dockerfile' 
#               tags: |
#                 $(buildId)
#                 latest

  - stage: 'CI_Production'
    jobs:
      - job: 
#   #  condition: and(succeeded(), eq(variables['isTag'], 'true'))
        variables: 
        - group: dbinclui-app-env-dev
        - name: enviroment
          value: 'prod'
        displayName: Run tests, build and push image to ACR
        steps:
         
         #ver variáveis de ambiente 
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'env | sort'
          - task: Npm@1
            displayName: 'Running install'
            inputs:
              command: custom
              customCommand: 'install --legacy-peer-deps' 

          - task: Npm@1
            displayName: "Running tests"
            inputs:
              command: custom
              customCommand: "run test"

          - task: Npm@1
            displayName: 'build prod'
            inputs:
              command: custom
              customCommand: 'run build'
              workingDir: ./

          - task: Docker@2
            displayName: Building docker image and pushing to ACR
            inputs:
              containerRegistry: $(acrServiceConnection)
              repository: $(dockerRepository)
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile' 
              tags: $(branchName)

  - stage: DeployToDevelopment
    #  dependsOn: CI
    # condition: and(succeeded(), eq(variables['isMergePR'], 'true'), ne(variables['isTag'], 'true'))
    variables:
      - name: enviroment
        value: 'dev'
      - name: ingress_domain
        value: 'dbinclui-dev'
      - group: dbinclui-app-env-dev
    jobs:
      - job: ApplyManifests
        displayName: Applying kubernetes manifests
        steps:
          - task: ShellScript@2
            displayName: Changing yaml's variables
            inputs:
              scriptPath: './kubernetes/change_variables.sh'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              kubernetesServiceConnection: $(aksServiceConnection)
              manifests: |
                ./kubernetes/deployment.yaml
                ./kubernetes/service.yaml
              containers: |
                $(acrUrl):latest
          - task: Kubernetes@1
            displayName: Apply Ingress
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: 'apply'
              useConfigurationFile: true
              configuration: './kubernetes/ingress.yaml'
              outputFormat: none
          # - task: Kubernetes@1
          #   displayName: Restart service
          #   inputs:
          #     connectionType: $(connectionType)
          #     kubernetesServiceEndpoint: $(aksServiceConnection)
          #     namespace: $(k8sNamespace)
          #     command: "rollout"
          #     arguments: "restart deploy dbinclui-app-dev"

          

#   - stage: DeployToProduction
#  #   dependsOn: CI
#   #  condition: and(succeeded(), eq(variables['isTag'], 'true'))
#     variables:
#       - name: enviroment
#         value: "prd"
#       - name: ingress_domain
#         value: "dbinclui"
#     jobs:
#       - job: ApplyManifests
#         displayName: Applying kubernetes manifests
#         steps:
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes
#             inputs:
#               action: deploy
#               namespace: $(k8sNamespace)
#               kubernetesServiceConnection: $(aksServiceConnection)
#               manifests: |
#                 ./kubernetes/deployment.yaml
#                 ./kubernetes/service.yaml
#               containers: |
#                 $(acrUrl):$(branchName)
#           - task: Kubernetes@1
#             displayName: Apply Ingress
#             inputs:
#               connectionType: $(connectionType)
#               kubernetesServiceEndpoint: $(aksServiceConnection)
#               namespace: $(k8sNamespace)
#               command: "apply"
#               useConfigurationFile: true
#               configuration: "./kubernetes/ingress.yaml"
#               outputFormat: none
#           # - task: Kubernetes@1
#           #   displayName: Restart service
#           #   inputs:
#           #     connectionType: $(connectionType)
#           #     kubernetesServiceEndpoint: $(aksServiceConnection)
#           #     namespace: $(k8sNamespace)
#           #     command: "rollout"
#           #     arguments: "restart deploy dbinclui-app-prd"
