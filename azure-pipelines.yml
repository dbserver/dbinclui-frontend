pr:
  branches:
    include:
      - azure-pipelines
trigger:
  branches:
    include:
      - azure-pipelines
  tags:
    include:
      - "*"

variables:
  - name: buildId
    value: $(Build.BuildId)

  - name: vmImage
    value: ubuntu-latest

  - name: k8sNamespace
    value: dbinclui

  - name: connectionType
    value: Kubernetes Service Connection

  - name: acrServiceConnection
    value: "docker-registry"

  - name: aksServiceConnection
    value: "AKS-DBSERVER"

  - name: dockerRepository
    value: "dbinclui/frontend"

  - name: branchName
    value: $(Build.SourceBranchName)

  - name: acrUrl
    value: "dbserverregistry.azurecr.io/dbinclui/frontend"

  - name: isTag
    value: ${{startsWith(variables['Build.SourceBranch'],'refs/tags/')}}

  - name: isMergePR
    value: ${{ne(variables['Build.Reason'], 'PullRequest')}}
  
  - group: dbinclui-app-env-dev
  

pool:
  vmImage: $(vmImage)

stages:
  - stage: CI
    jobs:
      - job: CI
        displayName: Run tests, build and push image to ACR
        steps:      
          - task: Npm@1
            displayName: "Running install"
            inputs:
              command: custom
              customCommand: "install --legacy-peer-deps"
          # - task: Npm@1
          #   displayName: "Running tests"
          #   inputs:
          #     command: custom
          #     customCommand: "run test"

    # Download secure file from azure library
          - task: DownloadSecureFile@1
            inputs:
              secureFile: '.env-development'

          # Copy the .env file
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(Agent.TempDirectory)'
              contents: '**/*.-'
              targetFolder: '$(YOUR_DEFINED_PROJECT_ROOT_FOLDER_VARIABLE)'
              cleanTargetFolder: false
          
          - task: CmdLine@2
            inputs:
              script: |
                set -a # automatically export all variables
                source .env-development
                set +a

          - task: Npm@1
            displayName: "Build Prod"
           # condition: or(eq(variables['isTag'], 'true'), eq(variables['isMergePR'], 'true'))
            inputs:
              command: custom
              customCommand: "run build"
              workingDir: ./
            
            #testing
          - task: Docker@2
            displayName: Building docker image and pushing to ACR
            condition: and(succeeded(), or(eq(variables['isMergePR'], 'true'), eq(variables['isTag'], 'true')))
            inputs:
              containerRegistry: $(acrServiceConnection)
              repository: $(dockerRepository)
              command: "buildAndPush"
              Dockerfile: "**/Dockerfile"
              ${{ if eq(variables['isTag'], 'true') }}:
              #   tags: $(branchName)
              # ${{ else }}:
                tags: |
                  $(buildId)
                  latest

  - stage: DeployToDevelopment
  #  dependsOn: CI
  # condition: and(succeeded(), eq(variables['isMergePR'], 'true'), ne(variables['isTag'], 'true'))
    variables:
      - name: enviroment
        value: "dev"
      - name: ingress_domain
        value: "dbinclui-dev"
      - group: dbinclui-app-env-dev
    jobs:
      - job: ApplyManifests
        displayName: Applying kubernetes manifests
        steps:
          - task: ShellScript@2
            displayName: Changing yaml's variables
            inputs:
              scriptPath: "./kubernetes/change_variables.sh"
         
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              kubernetesServiceConnection: $(aksServiceConnection)
              manifests: |
                ./kubernetes/deployment.yaml
                ./kubernetes/service.yaml
              containers: |
                $(acrUrl):latest
          - task: Kubernetes@1
            displayName: Apply Ingress
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: "apply"
              useConfigurationFile: true
              configuration: "./kubernetes/ingress.yaml"
              outputFormat: none
          # - task: Kubernetes@1
          #   displayName: Restart service
          #   inputs:
          #     connectionType: $(connectionType)
          #     kubernetesServiceEndpoint: $(aksServiceConnection)
          #     namespace: $(k8sNamespace)
          #     command: "rollout"
          #     arguments: "restart deploy dbinclui-app-dev"

#   - stage: DeployToProduction
#  #   dependsOn: CI
#   #  condition: and(succeeded(), eq(variables['isTag'], 'true'))
#     variables:
#       - name: enviroment
#         value: "prd"
#       - name: ingress_domain
#         value: "dbinclui"
#     jobs:
#       - job: ApplyManifests
#         displayName: Applying kubernetes manifests
#         steps:
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes
#             inputs:
#               action: deploy
#               namespace: $(k8sNamespace)
#               kubernetesServiceConnection: $(aksServiceConnection)
#               manifests: |
#                 ./kubernetes/deployment.yaml
#                 ./kubernetes/service.yaml
#               containers: |
#                 $(acrUrl):$(branchName)
#           - task: Kubernetes@1
#             displayName: Apply Ingress
#             inputs:
#               connectionType: $(connectionType)
#               kubernetesServiceEndpoint: $(aksServiceConnection)
#               namespace: $(k8sNamespace)
#               command: "apply"
#               useConfigurationFile: true
#               configuration: "./kubernetes/ingress.yaml"
#               outputFormat: none
#           # - task: Kubernetes@1
#           #   displayName: Restart service
#           #   inputs:
#           #     connectionType: $(connectionType)
#           #     kubernetesServiceEndpoint: $(aksServiceConnection)
#           #     namespace: $(k8sNamespace)
#           #     command: "rollout"
#           #     arguments: "restart deploy dbinclui-app-prd"
