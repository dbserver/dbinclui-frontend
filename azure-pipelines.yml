pr:
  branches:
    include:
      - feat/cd
trigger:
  branches:
    include:
      - feat/cd
  tags:
    include:
      - "*"

variables:
  - name: buildId
    value: $(Build.BuildId)

  - name: vmImage
    value: ubuntu-latest

  - name: k8sNamespace
    value: dbinclui

  - name: connectionType
    value: Kubernetes Service Connection

  - name: acrServiceConnection
    value: "docker-registry"

  - name: aksServiceConnection
    value: "AKS-DBSERVER"

  - name: dockerRepository
    value: "dbinclui/frontend"

  - name: branchName
    value: $(Build.SourceBranchName)

  - name: acrUrl
    value: "dbserverregistry.azurecr.io/dbinclui/frontend"

  - name: isTag
    value: ${{startsWith(variables['Build.SourceBranch'],'refs/tags/')}}

  - name: isMergePR
    value: ${{ne(variables['Build.Reason'], 'PullRequest')}}

pool:
  vmImage: $(vmImage)

stages:
  # - stage: CI
  #   jobs:
  #     - job: CI
  #       displayName: Run tests, build and push image to ACR
  #       steps:      
  #         - task: NodeTool@0
  #           inputs:
  #             versionSource: 'spec'
  #             versionSpec: '14.17.3'
  #         - task: Npm@1
  #           displayName: "install dependencies"
  #           inputs:
  #             script: "install"
  #         - task: Npm@1
  #           displayName: "Running tests"
  #           inputs:
  #             command: custom
  #             customCommand: "run test"
  #         - task: Npm@1
  #           displayName: "Build Prod"
  #           condition: or(eq(variables['isTag'], 'true'), eq(variables['isMergePR'], 'true'))
  #           inputs:
  #             command: custom
  #             customCommand: "run build"
  #             workingDir: ./
            
            
  #         - task: Docker@2
  #           displayName: Building docker image and pushing to ACR
  #           condition: and(succeeded(), or(eq(variables['isMergePR'], 'true'), eq(variables['isTag'], 'true')))
  #           inputs:
  #             containerRegistry: $(acrServiceConnection)
  #             repository: $(dockerRepository)
  #             command: "buildAndPush"
  #             Dockerfile: "**/Dockerfile"
  #             ${{ if eq(variables['isTag'], 'true') }}:
  #               tags: $(branchName)
  #             ${{ else }}:
  #               tags: |
  #                 $(buildId)
  #                 latest

  - stage: DeployToDevelopment
  #  dependsOn: CI
    condition: and(succeeded(), eq(variables['isMergePR'], 'true'), ne(variables['isTag'], 'true'))
    variables:
      - name: enviroment
        value: "dev"
      - name: ingress_domain
        value: "dbinclui-dev"
      - group: dbinclui-app-env-dev
    jobs:
      - job: ApplyManifests
        displayName: Applying kubernetes manifests
        steps:
          - task: ShellScript@2
            displayName: Changing yaml's variables
            inputs:
              scriptPath: "./kubernetes/change_variables.sh"
          - task: Kubernetes@1
            displayName: Create configmap
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              containerRegistryType: "Azure Container Registry"
              configMapName: "dbinclui-app-configmap-dev-teste"
              forceUpdateConfigMap: true
              configMapArguments: >
                  --from-literal=REACT_APP_FIREBASE_API_KEY=$("AIzaSyCTq9YwK6wgJehVYCH2lLo9zGDHlpEFwIY")
                  --from-literal=REACT_APP_FIREBASE_APP_ID=$("dbinclui-2f69e.firebaseapp.com")
                  --from-literal=REACT_APP_FIREBASE_AUTH_DOMAIN=$(authDomainDBinclui)
                  --from-literal=REACT_APP_FIREBASE_MEASUREMENT_ID=$(measurementIdDBinclui)
                  --from-literal=REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$(messagingSenderIdDBinclui)
                  --from-literal=REACT_APP_FIREBASE_PROJECT_ID=$(projectIdDBinclui)
                  --from-literal=REACT_APP_FIREBASE_STORAGE_BUCKET=$(storageBucketDBinclui)
                  --from-literal=REACT_APP_FIREBASE_DATABASE_URL=$(DataBaseUrlDBinclui)
         
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              kubernetesServiceConnection: $(aksServiceConnection)
              manifests: |
                ./kubernetes/deployment.yaml
                ./kubernetes/service.yaml
              containers: |
                $(acrUrl):latest
          - task: Kubernetes@1
            displayName: Apply Ingress
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: "apply"
              useConfigurationFile: true
              configuration: "./kubernetes/ingress.yaml"
              outputFormat: none
          - task: Kubernetes@1
            displayName: Restart service
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: "rollout"
              arguments: "restart deploy dbinclui-app-dev"

  - stage: DeployToProduction
 #   dependsOn: CI
    condition: and(succeeded(), eq(variables['isTag'], 'true'))
    variables:
      - name: enviroment
        value: "prd"
      - name: ingress_domain
        value: "dbinclui"
    jobs:
      - job: ApplyManifests
        displayName: Applying kubernetes manifests
        steps:
          - task: ShellScript@2
            displayName: Changing yaml's variables
            inputs:
              scriptPath: "./kubernetes/change_variables.sh"
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              kubernetesServiceConnection: $(aksServiceConnection)
              manifests: |
                ./kubernetes/deployment.yaml
                ./kubernetes/service.yaml
              containers: |
                $(acrUrl):$(branchName)
          - task: Kubernetes@1
            displayName: Apply Ingress
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: "apply"
              useConfigurationFile: true
              configuration: "./kubernetes/ingress.yaml"
              outputFormat: none
          - task: Kubernetes@1
            displayName: Restart service
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              command: "rollout"
              arguments: "restart deploy dbinclui-app-prd"
